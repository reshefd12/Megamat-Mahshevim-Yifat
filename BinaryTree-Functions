isLeaf-(4):
פעולה בודקת אם עלה
depth-(15):
פעולה בודקת מספר שכבות
foseries-():
פעולה בודקת אם יש סדרה עוקבת מהשורש לעלה
printByLevels-():
פעולה מדפיסה את העץ לפי רמות
RemoveLeaves-():
הפונקציה מקבלת עץ ומוחקת ממנו את העלים
leafCount-():
מקבלת עץ בינארי מחזירה כמות עלים



//טענת כניסה: הפונקציה מקבלת עץ בינארי
//טענת יציאה: מחזירה בוליאן אם הוא עלה או לא

  public static boolean isLeaf(BinNode<Integer> bt)
	{
		return !bt.hasLeft() && !bt.hasRight();
	}
  
  
//טענת כניסה: הפונקציה מקבלת עץ בינארי
//טענת יציאה: מחזירה ערך אינטג'רי של גובה המסלול המקסימלי

  public static int depth(BinNode<Integer> bt)
	{
		
		if(bt == null) 
			return 0;
					
		if(!bt.hasLeft())
			return 1 + depth(bt.getRight());
		
		if(!bt.hasRight())
			return 1 + depth(bt.getLeft());
		
		if(isLeaf(bt))
		{
			return 2;
		}
		
		return 1 + Math.max(depth(bt.getLeft()),depth(bt.getRight()));
			
	}


//טענת כניסה: הפונקציה מקבלת עץ בינארי ואת הערך של איבר הראש
//טענת יציאה: מחזירה בוליאן אם יש סדרה חשבונית עולה באחד מראש העץ עד העלה

  public static boolean foseries(BinNode<Integer> bt,int prev)
	{
		boolean fromLeft = false, fromRight = false;
		
		if(isLeaf(bt))
			return true;
		
		if(bt.hasLeft() && (prev + 1 == bt.getLeft().getValue()))
		{
			prev = bt.getLeft().getValue();
			fromLeft = foseries(bt.getLeft(),prev);
		}
		
		
		if(bt.hasRight() && (prev + 1 == bt.getRight().getValue()))
		{
			prev = bt.getRight().getValue();
			fromRight = foseries(bt.getRight(), prev);
		}
		
		return fromLeft || fromRight;
		
	}
  
  
//טענת כניסה: הפונקציה מקבלת עץ בינארי
//טענת יציאה: הפונקציה מדפיסה את העץ לפי רמות

  public static void printByLevels(BinNode<Integer> bt)
	{
		Queue<BinNode<Integer>> q = new Queue<BinNode<Integer>>();
		q.insert(bt);
		
		while(!q.isEmpty())
		{
			BinNode<Integer> current = q.remove();
			
			System.out.print(current.getValue() + ", ");
			
			if(current.hasLeft())
				q.insert(current.getLeft());
			
			if(current.hasRight())
				q.insert(current.getRight());
		}
		
	}
  
  
//טענת כניסה: הפונקציה מקבלת עץ בינארי
//טענת יציאה: הפונקציה מורידה את העלים

  public static void RemoveLeaves(BinNode<Integer> bt)
  {
    if(bt != null)
       {
        if(bt.hasLeft() && isLeaf(bt.getLeft()))
               bt.setLeft(null);
                    	
       	if(bt.hasRight() && isLeaf(bt.getRight()))
               bt.setRight(null);
        else
         {
         RemoveLeaves(bt.getLeft());
         RemoveLeaves(bt.getRight());
         }
       }
  }


//טענת כניסה: הפונקציה מקבלת עץ בינארי
//טענת יציאה: הפונקציה מחזירה את כמות העלים

  public static int leafCount(BinNode<Integer> root)
{
        	if (root == null)
                	return 0;
        	if (isLeaf(root))
                    	return 1;
        	return leafCount(root.getLeft()) + leafCount(root.getRight());
}


//טענת כניסה: הפונקציה מקבלת עץ בינארי
//טענת יציאה: הפונקציה מחזירה את סכום ערכי העלים

public static int leafSum(BinNode<Integer> root)
{
        	if (root == null)
                    	return 0;
        	if (isLeaf(root))
                    	return root.getValue();
        	return leafSum(root.getLeft()) + leafSum(root.getRight());
}


//טענת כניסה: הפונקציה מקבלת עץ בינארי
//טענת יציאה: הפונקציה מחזירה את מספר הצמתים

public static int interCount(BinNode<Integer> root)
{
        	if (root == null)
                    	return 0;
return 1 + interCount(root.getLeft()) + interCount(root.getRight());
}


//טענת כניסה: הפונקציה מקבלת עץ בינארי
//טענת יציאה: הפונקציה מחזירה את סכום ערכי הצמתים

public static int interSum(BinNode<Integer> root)
{
        	if (root == null)
                    	return 0;
return root.getValue() + interSum(root.getLeft()) + interSum(root.getRight());
}


//טענת כניסה: הפונקציה מקבלת עץ בינארי
//טענת יציאה: הפונקציה מחזירה את מספר הבנים הימניים

public static int numOfRightSon (BinNode<Integer> root)
{
        	if (root == null || isLeaf(root))
                    	return 0;
        	if(!root.hasRight())
                    	return numOfRightSon (root.getLeft());
 
        	return 1 + numOfRightSon (root.getLeft()) + numOfRightSon (root.getRight());
}


//טענת כניסה: הפונקציה מקבלת עץ בינארי
//טענת יציאה: הפונקציה מחזירה את מספר הבנים השמאליים

public static int numOfLeftSon (BinNode<Integer> root)
{
        	if (root == null || isLeaf(root))
        	        	return 0;
        	if(!root.hasLeft())
                    	return numOfRightSon (root.getRight());
return 1 + numOfRightSon (root.getLeft()) + numOfRightSon (root.getRight());
}


//טענת כניסה: הפונקציה מקבלת עץ בינארי
//טענת יציאה: הפונקציה מחזירה את סכום ערכי הבנים השמאליים

public static int sumOfLeftSon (BinNode<Integer> root)
{
        	if (root == null || isLeaf(root))
        	        	return 0;
        	if(!root.hasLeft())
                    	return numOfRightSon (root.getRight());
return root.getValue() + numOfRightSon (root.getLeft()) + numOfRightSon (root.getRight());
}


//טענת כניסה: הפונקציה מקבלת עץ בינארי
//טענת יציאה: הפונקציה מחזירה את סכום ערכי הבנים הימניים

public static int sumOfRightSon (BinNode<Integer> root)
{
        	if (root == null || isLeaf(root))
        	        	return 0;
        	if(!root.hasRight())
                    	return numOfRightSon (root.getLeft());
        	return root.getValue() + numOfRightSon (root.getLeft()) + numOfRightSon (root.getRight());
}


//טענת כניסה: הפונקציה מקבלת עץ בינארי
//טענת יציאה: הפונקציה מחזירה את מספר הילדים היחידים - שאין להם אחד

public static int numOfIndivSon (BinNode<Integer> root)
{
        	if (root == null || isLeaf(root))
                    	return 0;
        	if (root.hasLeft() && !root.hasRight())
                    	return 1 + numOfIndivSon(root.getLeft());
        	if (root.hasRight() && !root.hasLeft())
                    	return 1 + numOfIndivSon(root.getRight());
        	return numOfIndivSon(root.getLeft()) + numOfIndivSon(root.getRight());
}


//טענת כניסה: הפונקציה מקבלת עץ בינארי
//טענת יציאה: הפונקציה מחזירה את מספר הצמתים שיש להם 2 ילדים

public static int twoSons (BinNode<Integer> root) 
{
        	if (root == null || isLeaf(root))
        	        	return 0;
        	if (root.hasLeft() && root.hasRight())
        	        	return 1 + twoSons(root.getLeft()) + twoSons(root.getRight());
        	return twoSons(root.getLeft()) + twoSons(root.getRight());
}
 
 
//טענת כניסה: הפונקציה מקבלת עץ בינארי
//טענת יציאה: הפונקציה מחזירה את סכום ערכי כל העץ

public static int Sum(BinNode<Integer> head) 
{

		if (head != null) 
    {
			if (!head.hasLeft() && !head.hasRight()) 
      {
				return head.getValue();
			}
			return head.getValue() + Sum(head.getLeft()) + Sum(head.getRight());
		}
		return 0;
	}
	
	
  //טענת כניסה: מקבל עץ בינארי
  //טענת יציאה: מחזיר את הערך המקסימלי בעץ
  
  public static int LargestInTree(BinNode<Integer> head) {
		if (head == null) {
			return Integer.MIN_VALUE;
		}
		int temp = Math.max(LargestInTree(head.getLeft()), LargestInTree(head.getRight()));
		return Math.max(head.getValue(), temp);
	}
  
  
//טענת כניסה: הפונקציה מקבלת ראש של עץ ואת עומק העץ שרוצים לבנות
//טענת יציאה: הפונקציה בונה עץ בינארי מלא בעומק שנתנו

  	public static void build(BinNode<Integer> st, int count)
	{
		int val=count;
		if(count>0) 
		{
			st.setLeft(new BinNode<Integer> (rnd.nextInt((10)+1)));
			build(st.getLeft(),--val);
			st.setRight(new BinNode<Integer> (rnd.nextInt((10)+1)));
			build(st.getRight(),--count);
		}
	}


//טענת כניסה: פונקציה מקבלת עץ, מספר לבדיקה=לעומק החוליה, ועומק העץ. להציב קאונט=1 אם העומק סופר גם את השורש קאונט=0 אם הוא לא
//טענת יציאה: פונקציה מחזירה טרו אם העץ הוא עץ מלא ופולס אם הוא ריק

  	public static boolean full(BinNode<Integer> st, int count, int depth) {
		
		boolean fromL=false, fromR=false;
		int value=count;
		
		if(st.hasLeft()&&!st.hasRight()||!st.hasLeft()&&st.hasRight()) 
		{
			return false;
		}
		if(st.hasLeft()) 
		{
			fromL=full(st.getLeft(),++count,depth);
		}
		if(st.hasRight()) 
		{
			fromR=full(st.getRight(),++value,depth);
		}
		if(count==depth) 
		{
			System.out.println(st.getValue()+" , "+count +" "+depth);
			return true;
		}
		
		return fromL&&fromR;
	}
	
	
//טענת כניסה: הפונקציה מקבלת עץ
//טענת יציאה: הפונקציה מחזירה את הערך הכי גדול בעץ

	public static int biggest(BinNode<Integer> st) 
	{
		int l = 0, r = 0;
		if (st.hasLeft()) 
		{
			l = biggest(st.getLeft());
		}
		
		if (st.hasRight()) 
		{
			r = biggest(st.getRight());
		}
		return Math.max(st.getValue(), Math.max(l, r));

	}
	
	
//טענת כניסה: הפונקציה מקבלת 2 עצים בינארים
//טענת יציאה: הפונקציה מחזירה טרו אם העצים זהים לחלוטין(גם בערכים וגם במבנה) ופולס אם לא

	public static boolean similar (BinNode<Integer>a ,BinNode<Integer>b) 
	{
		boolean L = true;
		boolean R = true;
		if(a==null&&b!=null||a!=null&&b==null) 
		{
			return false;
		}
		
		if(a!=null&&b!=null)
		{
			if(a.getValue()!=b.getValue()) 
			{
				return false;}
			}
			if(a.hasLeft()&&b.hasLeft()) 
			{
				L=similar(a.getLeft(),b.getLeft());
			}
			if(a.hasRight()&&b.hasRight()) 
			{
				R=similar(a.getRight(),b.getRight());
			}
		return L&&R;
		}
  
  
//טענת כניסה: הפונקציה מקבלת עץ ומספר שמייצג רמה בעץ
//טענת יציאה: הפונקציה מחזירה את הסכום של כל הערכים ברמה זו

  	public static int sumLevel(BinNode<Integer> st, int num) 
	{
		int n = num;
		int L=0;
		int R=0;
		if(num==0) 
		{
			return st.getValue();
		}
		
		if(st.hasLeft()&&num>0) 
		{
			L=sumLevel(st.getLeft(),--num);
		}
		
		if(st.hasRight()&&n>0) 
		{
			R=sumLevel(st.getRight(),--n);
		}
	return R+L;
	}


//טענת כניסה: הפעולה מקבלת עץ בינארי
//טענת יציאה: הפעולה מחזירה האם הענף השמאלי ביותר של העץ זהה לענף הימני ביותר

  `	public static boolean isLeftBalancedRight(BinNode<Integer> root
		BinNode<Integer> right = root;
		BinNode<Integer> left = root;
		while (right.hasRight() && left.hasLeft()) 
		{
			if (right.getValue() != left.getValue()) 
			{
				return false;
			}
			right = right.getRight();
			left = left.getLeft();
		}
		if (right.getValue() != left.getValue()) 
		{
			return false;
		}
		if (right.hasRight() || left.hasLeft()) 
		{
			return false;
		}
		
		return true;
	}

// טענת כניסה: מקבל עץ בינארי
// טענת יציאה: ממיין את העץ כך שמכל צומת הבן השמאלי תמיד יהיה גדול מהימני
	public static void SortTreeLeftRight(BinNode<Integer> head) {
		if (head.getRight() != null && head.getLeft() != null) {
			if (head.getRight().getValue() > head.getLeft().getValue()) {
				int temp = head.getRight().getValue();
				head.getRight().setValue(head.getLeft().getValue());
				head.getLeft().setValue(temp);
			}
			SortTreeLeftRight(head.getLeft());
			SortTreeLeftRight(head.getRight());
		}
		if (head.getRight() == null && head.getLeft() != null) {
			SortTreeLeftRight(head.getLeft());
		}
		if (head.getLeft() == null && head.getRight() != null) {
			SortTreeLeftRight(head.getRight());
		}else {
			return;
		}

	}

}

//טענת כניסה: פעולה מקבלת שני עצים
//טענת יציאה: הפעולה מחזירה אם שני העצים זהים בהרכב שלהם (ללא ערך
	public static boolean SimilarTrees(BinNode<Integer> t1, BinNode<Integer> t2) {
		boolean SimL = false;
		boolean SimR = false;
		//בודקת אם לשניהם אין שמאלי - הם יהיו שווים בשל זה
		if (!t1.hasLeft() && !t2.hasLeft()) {
			SimL = true;
		}
		//קריאה רקורסיבית אם יש המשך
		if (t1.hasLeft() && t2.hasLeft()) {
			SimL = SimilarTrees (t1.getLeft(), t2.getLeft());
		}
		//בודקת אם לשניהם אין ימני - הם יהיו שווים בשל זה
		if (!t1.hasRight() && !t2.hasRight()) {
			SimR = true;
		}
		//קריאה רקורסיבית אם יש המשך
		if (t1.hasRight() && t2.hasRight()) {
			SimR = SimilarTrees (t1.getRight(), t2.getRight());
		}

//טענת כניסה: פעולה מקבלת מספר ועץ 
//טענת יציאה: פעולה מחזירה אמת אם המספר קיים בעץ
	public static boolean IsNumIn (BinNode <Integer> t1, int num) {
		int n = t1.getValue();
		boolean R = false;
		boolean L = false;
		
		if (t1.getValue() == num) {
			L = true;
		}
		
		if (t1.getValue() == num) {
			R = true;
		}
		
		if (t1.hasLeft()) {
			L = IsNumIn (t1.getLeft(), num);
		}
		
		if (t1.hasRight()) {
			R = IsNumIn (t1.getRight(), num);
		}
		return R || L;
	}
  	
	
	//הפעולה מקבלת עץ בינארי 
	// הפעולה מוסיפה לכל איבר,אם אין, אח באותו ערך ומחזירה את העץ
	public static BinNode<Integer> addBrother(BinNode<Integer> bt)
	{
		int num;
		
		if(!bt.hasLeft() && !bt.hasRight())
			return bt;
		
		if(bt.hasRight() && !bt.hasLeft())
		{
			num = bt.getRight().getValue();
			bt.setLeft(new BinNode<Integer>(num));
			bt.getLeft().setValue(num);
		}
		
		if(!bt.hasRight() && bt.hasLeft())
		{
			num = bt.getLeft().getValue();
			bt.setRight(new BinNode<Integer>(num));
			bt.getLeft().setValue(num);	
			
		}	
			addBrother(bt.getLeft());
			addBrother(bt.getRight());
	
		return bt;
	}
  
  	
  
  
